#!/bin/bash
set -eo pipefail

app_name="$1"
commit="$2"

build_dir="/srv/data/builds/$app_name"
cache_dir="/srv/data/cache/$app_name"

slug_dir="/srv/data/slugs"
buildpack_root="/srv/buildpacks"

mkdir -p $slug_dir $cache_dir

function output_redirect() {
  cat -
}

function echo_title() {
  echo $'\e[1G----->' $* | output_redirect
}

function echo_normal() {
  echo $'\e[1G      ' $* | output_redirect
}

function ensure_indent() {
  while read line; do
    if [[ "$line" == --* ]]; then
      echo $'\e[1G'$line | output_redirect
    else
      echo $'\e[1G      ' "$line" | output_redirect
    fi
  done
}

## Load source from STDIN
echo_title "Cleaning build folder" && rm -fr $build_dir || true
mkdir -p $build_dir
cat | tar -xC $build_dir

## Buildpack detection

buildpacks=($buildpack_root/*)
# zero value variable used in conditionals
selected_buildpack=

if [[ -n "$BUILDPACK_URL" ]]; then
  echo_title "Fetching custom buildpack"
  buildpack="$buildpack_root/custom"
  rm -fr "$buildpack"
  git clone --depth=1 "$BUILDPACK_URL" "$buildpack"
  selected_buildpack="$buildpack"
  buildpack_name=$($buildpack/bin/detect "$build_dir") && selected_buildpack=$buildpack
else
    for buildpack in "${buildpacks[@]}"; do
      buildpack_name=$($buildpack/bin/detect "$build_dir") && \
          selected_buildpack=$buildpack && break
    done
fi

if [[ -n "$selected_buildpack" ]]; then
  echo_title "$buildpack_name app detected"
else
  echo_title "Unable to select a buildpack"
  exit 1
fi

## Buildpack compile

$selected_buildpack/bin/compile "$build_dir" "$cache_dir" | ensure_indent

## Produce slug

slug_file="$slug_dir/$app_name-latest.tgz"
checksum_file="$slug_dir/$app_name-latest.sha512"

previous_slug_file="$slug_dir/$app_name-previous.tgz"
previous_checksum_file="$slug_dir/$app_name-previous.sha512"

if [[ -e "$slug_file" ]]; then
  if [[ -e "$previous_slug_file" ]]; then
    rm $previous_slug_file
    rm $previous_checksum_file
  fi
  echo_title "Storing previous slug for potential rollbacks"
  mv $slug_file $previous_slug_file
  mv $checksum_file $previous_checksum_file
fi

if [[ -f "$build_dir/.slugignore" ]]; then
  # Excludes files listed in slugignore
  tar -X "$build_dir/.slugignore" --directory $build_dir -zcf $slug_file . | cat
else
  tar --directory $build_dir -zcf $slug_file . | cat
fi

# Write shasum
checksum=sha512sum $slug_file | awk -F '\ ' '{print $1}' -
echo $checksum > $checksum_file

slug_size=$(du -Sh "$slug_file" | cut -f1)
echo_title "Compiled slug size is $slug_size"