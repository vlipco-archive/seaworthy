require 'rubygems'
require 'bundler/setup'
Bundler.require :default

IMAGES = [ # hold images names and dependencies (if any)
	:hull,
	{deckhouse: [:hull]},
	{waypoint: [:deckhouse]},
	{harbor: [:deckhouse]},
	{ferry: [:deckhouse]},
	{ship: [:hull]}
]

def info(msg)
	puts "\n---> #{msg}\n".colorize :green
end

def error(msg)
	puts "\n---> #{msg}\n".colorize :red
end

#def sh_indent(cmd)
#	# verbose false prevent echoing the command being run
#	sh "#{cmd} | bin/indent", verbose: false
#end

def image_folder image
	File.expand_path "../docker-images/#{image.to_s}", __FILE__
end

directory ".tmp"

namespace :docker do
	namespace :build do
		IMAGES.each do |img|
			if img.class == Hash
				name = img.keys.first
				dependencies = img[name].push '.tmp'
				task_signature = {name => dependencies}
			else
				name = img
				task_signature = {name => '.tmp'}
			end
			desc "Build vlipco/#{name} from Dockerfile"
			task task_signature do
				folder = image_folder(name)
				dockerfile = "#{folder}/Dockerfile"
				digest_file = File.expand_path "../.tmp/#{name}.md5", __FILE__
				last_digest = begin File.read digest_file rescue nil end
				current_digest = Digest::MD5.hexdigest File.read dockerfile
				if current_digest != last_digest
					info "Building #{name}"
					cmd="docker build -t vlipco/hull --rm #{folder} | bin/indent"
					sh cmd do |ok,res|
						if ok
							File.open( digest_file, 'w+') do |f|
								f.write current_digest
							end
						else
							error "Docker build failed"
						end
					end
				else
					info "#{name} up to date"
				end
			end
		end
	end
end






namespace :cluster do
end