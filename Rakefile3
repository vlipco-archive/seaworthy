require 'rubygems'
require 'bundler/setup'
Bundler.require :default

Rake.add_rakelib 'tasks'
#dockerfiles = 

def info(msg)
	puts "\n---> #{msg}\n".colorize :green
end

def error(msg)
	puts "\n---> #{msg}\n".colorize :red
end

def dockerfile_for(f)
	path = "../docker-images/#{f.pathmap '%n'}/Dockerfile"
	dockerfile = File.expand_path path, __FILE__
	#puts dockerfile
	return dockerfile
end

rule( /\.cache\/.*/ => ->(f){dockerfile_for(f)}) do |t|
	image_name = t.name.pathmap '%n'
	image_folder = t.source.pathmap '%d'
	info "Building #{image_name} #{t.source} => #{t.name}"
	cmd="docker build -t vlipco/#{image_name} --rm #{image_folder} | bin/indent"
	mkdir_p t.name.pathmap '%d'
	sh cmd do |ok,res|
		if ok
			digest = Digest::MD5.hexdigest File.read(t.source)
			File.open( t.name, 'w+') {|f| f.write digest }
		else
			error "Docker build failed"
		end
	end	
end

task :clean_build_cache do
	rm_f FileList['.cache/*.build']
end

# hold images names and dependencies (if any)
IMAGES = {
	hull: [],
	deckhouse: [".cache/hull"],
	waypoint: [".cache/deckhouse"],
	harbor: [".cache/deckhouse"],
	ferry: [".cache/deckhouse"],
	ship: [".cache/hull"]
}

namespace :build do
	IMAGES.each do |img, deps|
		desc "Build vlipco/#{img} from Dockerfile"
		my_build = ".cache/#{img}"
		task img => deps.push(my_build)
	end
end